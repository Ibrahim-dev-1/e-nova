{"ast":null,"code":"var _jsxFileName = \"/media/kratos/Nouveau nom/APPRENDRE/src/components/address-card/address-card.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { withFormik, Form } from \"formik\";\nimport TextField from \"../../components/forms/text-field\";\nimport { Button } from \"../../components/button/button\";\nimport { FieldWrapper, Heading } from \"./address-card.style\";\nimport { FormattedMessage } from \"react-intl\"; // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || \"\",\n      info: props.item.info || \"\"\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"Title is required!\"),\n    info: Yup.string().required(\"Address is required\")\n  }),\n  handleSubmit: values => {\n    console.log(values, \"values\"); // do submitting things\n  }\n});\n\nconst UpdateAddress = props => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: \"secondary\",\n    name: values.name,\n    info: values.info\n  };\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      console.log(\"address data\");\n    }\n  };\n\n  return __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, item && item.id ? \"Edit Address\" : \"Add New Address\"), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"name\",\n    type: \"text\",\n    placeholder: \"Enter Title\",\n    error: touched.name && errors.name,\n    value: values.name,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  })), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(TextField, {\n    id: \"info\",\n    as: \"textarea\",\n    placeholder: \"Enter Address\",\n    error: touched.info && errors.info,\n    value: values.info,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    style: {\n      width: \"100%\",\n      height: \"44px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedAddressId\",\n    defaultMessage: \"Save Address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default FormEnhancer(UpdateAddress);","map":{"version":3,"sources":["/media/kratos/Nouveau nom/APPRENDRE/src/components/address-card/address-card.tsx"],"names":["React","Yup","withFormik","Form","TextField","Button","FieldWrapper","Heading","FormattedMessage","FormEnhancer","mapPropsToValues","props","id","item","name","info","validationSchema","object","shape","string","required","handleSubmit","values","console","log","UpdateAddress","isValid","touched","errors","dirty","handleChange","handleBlur","handleReset","isSubmitting","addressValue","type","width","height"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport * as Yup from \"yup\";\nimport { withFormik, FormikProps, Form } from \"formik\";\nimport { closeModal } from \"@redq/reuse-modal\";\nimport TextField from \"../../components/forms/text-field\";\nimport { Button } from \"../../components/button/button\";\nimport { FieldWrapper, Heading } from \"./address-card.style\";\nimport { FormattedMessage } from \"react-intl\";\n\n// Shape of form values\ninterface FormValues {\n  id?: number | null;\n  name?: string;\n  info?: string;\n}\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  item?: any | null;\n}\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: (props) => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || \"\",\n      info: props.item.info || \"\",\n    };\n  },\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"Title is required!\"),\n    info: Yup.string().required(\"Address is required\"),\n  }),\n  handleSubmit: (values) => {\n    console.log(values, \"values\");\n    // do submitting things\n  },\n});\n\nconst UpdateAddress = (props: FormikProps<FormValues> & MyFormProps) => {\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n\n    handleReset,\n    isSubmitting,\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: \"secondary\",\n    name: values.name,\n    info: values.info,\n  };\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      console.log(\"address data\");\n    }\n  };\n  return (\n    <Form>\n      <Heading>{item && item.id ? \"Edit Address\" : \"Add New Address\"}</Heading>\n      <FieldWrapper>\n        <TextField\n          id=\"name\"\n          type=\"text\"\n          placeholder=\"Enter Title\"\n          error={touched.name && errors.name}\n          value={values.name}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n\n      <FieldWrapper>\n        <TextField\n          id=\"info\"\n          as=\"textarea\"\n          placeholder=\"Enter Address\"\n          error={touched.info && errors.info}\n          value={values.info}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </FieldWrapper>\n\n      <Button\n        onClick={handleSubmit}\n        type=\"submit\"\n        style={{ width: \"100%\", height: \"44px\" }}\n      >\n        <FormattedMessage id=\"savedAddressId\" defaultMessage=\"Save Address\" />\n      </Button>\n    </Form>\n  );\n};\n\nexport default FormEnhancer(UpdateAddress);\n"]},"metadata":{},"sourceType":"module"}