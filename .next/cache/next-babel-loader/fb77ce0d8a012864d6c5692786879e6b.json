{"ast":null,"code":"var _jsxFileName = \"/media/kratos/Nouveau nom/APPRENDRE/src/components/contact-card/contact-card.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { themeGet } from \"@styled-system/theme-get\";\nimport * as Yup from \"yup\";\nimport { closeModal } from \"@redq/reuse-modal\";\nimport { ErrorMessage, Formik, Form } from \"formik\";\nimport MaskedInput from \"react-text-mask\";\nimport { Button } from \"../button/button\";\nimport { FieldWrapper, Heading } from \"./contact-card.style\";\nimport { FormattedMessage } from \"react-intl\";\nconst ContactValidationSchema = Yup.object().shape({\n  number: Yup.string().required(\"Number is required\")\n});\n\nconst CreateOrUpdateContact = ({\n  item\n}) => {\n  const initialValues = {\n    id: item.id || null,\n    type: item.type || \"secondary\",\n    number: item.number || \"\"\n  };\n\n  const handleSubmit = async (values, {\n    setSubmitting\n  }) => {\n    console.log(values, \"formik values\");\n    closeModal();\n    setSubmitting(false);\n  };\n\n  return __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: ContactValidationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    handleChange,\n    handleBlur,\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, item && item.id ? \"Edit Contact\" : \"Add New Contact\"), __jsx(FieldWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, __jsx(MaskedInput, {\n    mask: [\"(\", /[1-9]/, /\\d/, /\\d/, \")\", \" \", /\\d/, /\\d/, /\\d/, \"-\", /\\d/, /\\d/, /\\d/, /\\d/],\n    className: \"form-control\",\n    placeholder: \"Enter a phone number\",\n    guide: false,\n    id: \"my-input-id\",\n    value: values.number,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    name: \"number\",\n    render: (ref, props) => __jsx(StyledInput, _extends({\n      ref: ref\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  })), __jsx(ErrorMessage, {\n    name: \"number\",\n    component: StyledError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    disabled: isSubmitting,\n    type: \"submit\",\n    style: {\n      width: \"100%\",\n      height: \"44px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"savedContactId\",\n    defaultMessage: \"Save Contact\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default CreateOrUpdateContact;\nconst StyledInput = styled.input.withConfig({\n  displayName: \"contact-card__StyledInput\",\n  componentId: \"sc-153x5cr-0\"\n})([\"width:100%;height:54px;border-radius:\", \";font-family:\", \";border:1px solid \", \";color:\", \";font-size:16px;line-height:19px;font-weight:\", \";padding:0 18px;box-sizing:border-box;transition:border-color 0.25s ease;&:hover,&:focus{outline:0;}&:focus{border-color:\", \";}&::placeholder{color:\", \";}\"], themeGet(\"radii.base\", \"6px\"), themeGet(\"fonts.body\", \"Lato, sans-serif\"), themeGet(\"colors.gray.700\", \"#e6e6e6\"), themeGet(\"colors.text.bold\", \"#0D1136\"), themeGet(\"fontWeights.regular\", \"400\"), themeGet(\"colors.primary.regular\", \"#009e7f\"), themeGet(\"colors.text.regular\", \"#77798C\"));\nconst StyledError = styled.div.withConfig({\n  displayName: \"contact-card__StyledError\",\n  componentId: \"sc-153x5cr-1\"\n})([\"color:red;padding-bottom:10px;margin-top:-5px;\"]);","map":{"version":3,"sources":["/media/kratos/Nouveau nom/APPRENDRE/src/components/contact-card/contact-card.tsx"],"names":["React","styled","themeGet","Yup","closeModal","ErrorMessage","Formik","Form","MaskedInput","Button","FieldWrapper","Heading","FormattedMessage","ContactValidationSchema","object","shape","number","string","required","CreateOrUpdateContact","item","initialValues","id","type","handleSubmit","values","setSubmitting","console","log","handleChange","handleBlur","isSubmitting","ref","props","StyledError","width","height","StyledInput","input","div"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { themeGet } from \"@styled-system/theme-get\";\nimport * as Yup from \"yup\";\nimport { closeModal } from \"@redq/reuse-modal\";\nimport { FormikProps, ErrorMessage, Formik, Form } from \"formik\";\nimport MaskedInput from \"react-text-mask\";\nimport { Button } from \"../button/button\";\nimport { FieldWrapper, Heading } from \"./contact-card.style\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype Props = {\n  item?: any | null;\n};\n// Shape of form values\ntype FormValues = {\n  id?: number | null;\n  type?: string;\n  number?: string;\n};\n\nconst ContactValidationSchema = Yup.object().shape({\n  number: Yup.string().required(\"Number is required\"),\n});\n\nconst CreateOrUpdateContact: React.FC<Props> = ({ item }) => {\n  const initialValues = {\n    id: item.id || null,\n    type: item.type || \"secondary\",\n    number: item.number || \"\",\n  };\n  const handleSubmit = async (values: FormValues, { setSubmitting }: any) => {\n    console.log(values, \"formik values\");\n    closeModal();\n    setSubmitting(false);\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={ContactValidationSchema}\n    >\n      {({\n        values,\n        handleChange,\n        handleBlur,\n        isSubmitting,\n      }: FormikProps<FormValues>) => (\n        <Form>\n          <Heading>\n            {item && item.id ? \"Edit Contact\" : \"Add New Contact\"}\n          </Heading>\n          <FieldWrapper>\n            <MaskedInput\n              mask={[\n                \"(\",\n                /[1-9]/,\n                /\\d/,\n                /\\d/,\n                \")\",\n                \" \",\n                /\\d/,\n                /\\d/,\n                /\\d/,\n                \"-\",\n                /\\d/,\n                /\\d/,\n                /\\d/,\n                /\\d/,\n              ]}\n              className=\"form-control\"\n              placeholder=\"Enter a phone number\"\n              guide={false}\n              id=\"my-input-id\"\n              value={values.number}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              name=\"number\"\n              render={(ref: any, props: {}) => (\n                <StyledInput ref={ref} {...props} />\n              )}\n            />\n          </FieldWrapper>\n          <ErrorMessage name=\"number\" component={StyledError} />\n\n          <Button\n            disabled={isSubmitting}\n            type=\"submit\"\n            style={{ width: \"100%\", height: \"44px\" }}\n          >\n            <FormattedMessage\n              id=\"savedContactId\"\n              defaultMessage=\"Save Contact\"\n            />\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default CreateOrUpdateContact;\n\nconst StyledInput = styled.input`\n  width: 100%;\n  height: 54px;\n  border-radius: ${themeGet(\"radii.base\", \"6px\")};\n  font-family: ${themeGet(\"fonts.body\", \"Lato, sans-serif\")};\n  border: 1px solid ${themeGet(\"colors.gray.700\", \"#e6e6e6\")};\n  color: ${themeGet(\"colors.text.bold\", \"#0D1136\")};\n  font-size: 16px;\n  line-height: 19px;\n  font-weight: ${themeGet(\"fontWeights.regular\", \"400\")};\n  padding: 0 18px;\n  box-sizing: border-box;\n  transition: border-color 0.25s ease;\n\n  &:hover,\n  &:focus {\n    outline: 0;\n  }\n\n  &:focus {\n    border-color: ${themeGet(\"colors.primary.regular\", \"#009e7f\")};\n  }\n\n  &::placeholder {\n    color: ${themeGet(\"colors.text.regular\", \"#77798C\")};\n  }\n`;\n\nconst StyledError = styled.div`\n  color: red;\n  padding-bottom: 10px;\n  margin-top: -5px;\n`;\n"]},"metadata":{},"sourceType":"module"}